// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id       String    @id @default(uuid())
    email    String    @unique
    patients Patient[]
    password Password?
}

model Password {
    id        String  @id @default(uuid())
    salt      String
    hash      String
    account   Account @relation(fields: [accountId], references: [id])
    accountId String  @unique
}

model Patient {
    id              String            @id @default(uuid())
    createdAt       DateTime          @default(now())
    firstname       String            @db.VarChar(50)
    lastname        String            @db.VarChar(50)
    dateofbirth     DateTime          @db.Date()
    gender          Gender?           @relation(fields: [genderId], references: [id])
    genderId        Int?
    patientResponse PatientResponse[]
    account         Account?          @relation(fields: [accountId], references: [id])
    accountId       String?
    riskAssessment  RiskAssessment[]
}

model Gender {
    id           Int            @id @default(autoincrement())
    gender       String         @unique @db.VarChar(50)
    patient      Patient[]
    dailyResults DailyResults[]
}

model RiskAssessment {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    patient    Patient  @relation(fields: [patientId], references: [id])
    patientId  String
    risktype   RiskType @relation(fields: [riskTypeId], references: [id])
    riskTypeId Int
}

model RiskType {
    id             Int              @id @default(autoincrement())
    name           String           @unique @db.VarChar(50)
    riskAssessment RiskAssessment[]
    dailyResults   DailyResults[]
}

model Question {
    id              Int               @id @default(autoincrement())
    title           String            @unique @db.VarChar(255)
    content         String            @db.VarChar(255)
    order           Int               @unique
    answerFormat    AnswerFormat      @relation(fields: [answerFormatId], references: [id])
    answerFormatId  Int
    category        QuestionCategory  @relation(fields: [categoryId], references: [id])
    categoryId      Int
    patientResponse PatientResponse[]
}

model AnswerFormat {
    id             Int              @id @default(autoincrement())
    name           String           @unique @db.VarChar(50)
    question       Question[]
    responseOption ResponseOption[]
}

model QuestionCategory {
    id       Int        @id @default(autoincrement())
    name     String     @unique @db.VarChar(50)
    question Question[]
}

model PatientResponse {
    id               Int            @id @default(autoincrement())
    createdAt        DateTime       @default(now())
    patient          Patient        @relation(fields: [patientId], references: [id])
    patientId        String
    question         Question       @relation(fields: [questionId], references: [id])
    questionId       Int
    responseOption   ResponseOption @relation(fields: [responseOptionId], references: [id])
    responseOptionId Int

    @@unique([patientId, questionId]) // Composite unique constraint
}

model ResponseOption {
    id              Int               @id @default(autoincrement())
    answerFormat    AnswerFormat      @relation(fields: [answerFormatId], references: [id])
    answerFormatId  Int
    responsevalue   String            @unique @db.VarChar(255)
    patientResponse PatientResponse[]
}

model AgeGroup {
    id           Int            @id @default(autoincrement())
    name         String         @unique @db.VarChar(50) // e.g., "18-30", "31-40"
    minAge       Int // Minimum age in the group
    maxAge       Int? // Maximum age in the group (null for open-ended ranges like "60+")
    dailyResults DailyResults[]
}

model DailyResults {
    id         Int       @id @default(autoincrement())
    createdAt  DateTime  @default(now())
    RiskType   RiskType  @relation(fields: [riskTypeId], references: [id])
    riskTypeId Int
    count      Int
    gender     Gender?   @relation(fields: [genderId], references: [id])
    genderId   Int?
    ageGroup   AgeGroup? @relation(fields: [ageGroupId], references: [id])
    ageGroupId Int?

    @@unique([riskTypeId, ageGroupId, genderId, createdAt]) // Composite unique constraint
}
